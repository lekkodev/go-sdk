// Copyright 2022 Lekko Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: lekko/backend/v1beta1/configuration_service.proto

package backendv1beta1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1beta1 "github.com/lekkodev/core/pkg/gen/proto/go/lekko/backend/v1beta1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ConfigurationServiceName is the fully-qualified name of the ConfigurationService service.
	ConfigurationServiceName = "lekko.backend.v1beta1.ConfigurationService"
)

// ConfigurationServiceClient is a client for the lekko.backend.v1beta1.ConfigurationService
// service.
type ConfigurationServiceClient interface {
	GetBoolValue(context.Context, *connect_go.Request[v1beta1.GetBoolValueRequest]) (*connect_go.Response[v1beta1.GetBoolValueResponse], error)
}

// NewConfigurationServiceClient constructs a client for the
// lekko.backend.v1beta1.ConfigurationService service. By default, it uses the Connect protocol with
// the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use
// the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewConfigurationServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ConfigurationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &configurationServiceClient{
		getBoolValue: connect_go.NewClient[v1beta1.GetBoolValueRequest, v1beta1.GetBoolValueResponse](
			httpClient,
			baseURL+"/lekko.backend.v1beta1.ConfigurationService/GetBoolValue",
			opts...,
		),
	}
}

// configurationServiceClient implements ConfigurationServiceClient.
type configurationServiceClient struct {
	getBoolValue *connect_go.Client[v1beta1.GetBoolValueRequest, v1beta1.GetBoolValueResponse]
}

// GetBoolValue calls lekko.backend.v1beta1.ConfigurationService.GetBoolValue.
func (c *configurationServiceClient) GetBoolValue(ctx context.Context, req *connect_go.Request[v1beta1.GetBoolValueRequest]) (*connect_go.Response[v1beta1.GetBoolValueResponse], error) {
	return c.getBoolValue.CallUnary(ctx, req)
}

// ConfigurationServiceHandler is an implementation of the
// lekko.backend.v1beta1.ConfigurationService service.
type ConfigurationServiceHandler interface {
	GetBoolValue(context.Context, *connect_go.Request[v1beta1.GetBoolValueRequest]) (*connect_go.Response[v1beta1.GetBoolValueResponse], error)
}

// NewConfigurationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewConfigurationServiceHandler(svc ConfigurationServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/lekko.backend.v1beta1.ConfigurationService/GetBoolValue", connect_go.NewUnaryHandler(
		"/lekko.backend.v1beta1.ConfigurationService/GetBoolValue",
		svc.GetBoolValue,
		opts...,
	))
	return "/lekko.backend.v1beta1.ConfigurationService/", mux
}

// UnimplementedConfigurationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedConfigurationServiceHandler struct{}

func (UnimplementedConfigurationServiceHandler) GetBoolValue(context.Context, *connect_go.Request[v1beta1.GetBoolValueRequest]) (*connect_go.Response[v1beta1.GetBoolValueResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("lekko.backend.v1beta1.ConfigurationService.GetBoolValue is not implemented"))
}
