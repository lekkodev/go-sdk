// Copyright 2022 Lekko Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package lekko.client.v1beta1;

import "google/protobuf/any.proto";

// Initial implementation of a feature flagging service.
service ConfigurationService {
  rpc GetBoolValue(GetBoolValueRequest) returns (GetBoolValueResponse) {}
  rpc GetIntValue(GetIntValueRequest) returns (GetIntValueResponse) {}
  rpc GetFloatValue(GetFloatValueRequest) returns (GetFloatValueResponse) {}
  rpc GetStringValue(GetStringValueRequest) returns (GetStringValueResponse) {}
  rpc GetProtoValue(GetProtoValueRequest) returns (GetProtoValueResponse) {}
  rpc GetJSONValue(GetJSONValueRequest) returns (GetJSONValueResponse) {}
  // Register is used to denote a RepositoryKey and namespaces within it
  // that a client is interested in so the server can cache and keep up to date.
  rpc Register(RegisterRequest) returns (RegisterResponse) {}
  // Deregister is used to tell the server that a client is shutting down. It is not
  // required but preferable to have implementations call this once their lifecycle
  // has completed.
  rpc Deregister(DeregisterRequest) returns (DeregisterResponse) {}
}

message RepositoryKey {
  string owner_name = 1;
  string repo_name = 2;
}

message GetBoolValueRequest {
  string key = 1;
  map<string, Value> context = 2;
  string namespace = 3;
  RepositoryKey repo_key = 4;
}

message GetBoolValueResponse {
  bool value = 1;
}

message GetIntValueRequest {
  string key = 1;
  map<string, Value> context = 2;
  string namespace = 3;
  RepositoryKey repo_key = 4;
}

message GetIntValueResponse {
  int64 value = 1;
}

message GetFloatValueRequest {
  string key = 1;
  map<string, Value> context = 2;
  string namespace = 3;
  RepositoryKey repo_key = 4;
}

message GetFloatValueResponse {
  double value = 1;
}

message GetStringValueRequest {
  string key = 1;
  map<string, Value> context = 2;
  string namespace = 3;
  RepositoryKey repo_key = 4;
}

message GetStringValueResponse {
  string value = 1;
}

message GetProtoValueRequest {
  string key = 1;
  map<string, Value> context = 2;
  string namespace = 3;
  RepositoryKey repo_key = 4;
}

message GetProtoValueResponse {
  google.protobuf.Any value = 1;
}

message GetJSONValueRequest {
  string key = 1;
  map<string, Value> context = 2;
  string namespace = 3;
  RepositoryKey repo_key = 4;
}

message GetJSONValueResponse {
  bytes value = 1;
}

message Value {
  oneof kind {
    bool bool_value = 1;
    int64 int_value = 2;
    double double_value = 3;
    string string_value = 4;
  }
}

message RegisterRequest {
  RepositoryKey repo_key = 1;
  // The namespaces to register within the repo. If empty,
  // all namespaces will be registered.
  repeated string namespace_list = 2;
}

message RegisterResponse {}

message DeregisterRequest {}
message DeregisterResponse {}
